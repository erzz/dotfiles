[
  {
    "context": "Dock || Terminal || Editor || (ProjectPanel && not_editing)",
    "bindings": {
      "ctrl-h": "workspace::ActivatePaneLeft",
      "ctrl-l": "workspace::ActivatePaneRight",
      "ctrl-k": "workspace::ActivatePaneUp",
      "ctrl-j": "workspace::ActivatePaneDown"
    }
  },
  // Essential bindings for when there is no active editor
  {
    "context": "EmptyPane || SharedScreen",
    "bindings": {
      // Open file finder
      "space space": "file_finder::Toggle",
      // Open recent project
      "space f p": "projects::OpenRecent",
      "ctrl-h": "workspace::ActivatePaneLeft",
      "ctrl-l": "workspace::ActivatePaneRight",
      "ctrl-k": "workspace::ActivatePaneUp",
      "ctrl-j": "workspace::ActivatePaneDown"
    }
  },
  {
    // VIM NORMAL AND VISUAL MODE
    "context": "Editor && (vim_mode == normal || vim_mode == visual) && !VimWaiting && !menu",
    "bindings": {
      "space b h": "pane::SplitRight",
      "space b v": "pane::SplitDown",
      "space g b": "git::Blame",
      "space g g": [
        "task::Spawn",
        {
          "task_name": "lazygit"
        }
      ],
      // Toggle inlay hints
      "space t i": "editor::ToggleInlayHints",
      // Toggle soft wrap
      "space u w": "editor::ToggleSoftWrap",
      // NOTE: Toggle Zen mode, not fully working yet
      "space c z": "workspace::ToggleCenteredLayout",
      // Open markdown preview
      "space m p": "markdown::OpenPreviewToTheSide",
      // Open recent project
      "space f p": "projects::OpenRecent",
      // Search word under cursor
      "space s w": "pane::DeploySearch",
      // Chat with AI
      "space a c": "assistant::ToggleFocus",
      // Go to file with `gf`
      "g f": "editor::OpenExcerpts"
    }
  },
  {
    // VIM NORMAL MODE ONLY
    "context": "Editor && vim_mode == normal && !VimWaiting && !menu",
    "bindings": {
      // +LSP
      "space c a": "editor::ToggleCodeActions",
      "space .": "editor::ToggleCodeActions",
      "space c r": "editor::Rename",
      "g d": "editor::GoToDefinition",
      "g D": "editor::GoToDefinitionSplit",
      "g i": "editor::GoToImplementation",
      "g I": "editor::GoToImplementationSplit",
      "g t": "editor::GoToTypeDefinition",
      "g T": "editor::GoToTypeDefinitionSplit",
      "g r": "editor::FindAllReferences",
      "] d": "editor::GoToDiagnostic",
      "[ d": "editor::GoToPreviousDiagnostic",
      // TODO: Go to next/prev error
      "] e": "editor::GoToDiagnostic",
      "[ e": "editor::GoToPreviousDiagnostic",
      // Symbol search
      "s s": "outline::Toggle",
      "s S": "project_symbols::Toggle",
      // Diagnostic
      "space x x": "diagnostics::Deploy",
      // + Buffers
      // Switch between buffers
      "shift-h": "pane::ActivatePreviousItem",
      "shift-l": "pane::ActivateNextItem",
      // Close active panel
      "shift-q": "pane::CloseActiveItem",
      "ctrl-q": "pane::CloseActiveItem",
      "space b d": "pane::CloseActiveItem",
      // Close other items
      "space b o": "pane::CloseInactiveItems",
      // New file
      "space b n": "project_panel::NewFile",
      // Save file
      "ctrl-s": "workspace::Save",
      // File finder
      "space space": "file_finder::Toggle",
      // Project search
      "space f g": "pane::DeploySearch",
      // TODO: Open other files
      // Show project panel with current file
      "space e": "pane::RevealInProjectPanel"
    }
  },
  // VIM VISUAL MODE ONLY
  {
    "context": "Editor && vim_mode == visual && !VimWaiting && !menu",
    "bindings": {
      "g c": "editor::ToggleComments"
    }
  },
  // VIM INSERT MODE ONLY
  {
    "context": "Editor && vim_mode == insert && !menu",
    "bindings": {
      "j j": "vim::NormalBefore", // remap jj in insert mode to escape
      "j k": "vim::NormalBefore" // remap jk in insert mode to escape
    }
  },
  // Rename
  {
    "context": "Editor && vim_operator == c",
    "bindings": {
      "a": "editor::ToggleCodeActions",
      "c": "vim::CurrentLine",
      "r": "editor::Rename" // zed specific
    }
  },
  // EXPLORER PANEL
  {
    "context": "ProjectPanel && not_editing",
    "bindings": {
      "a": "project_panel::NewFile",
      "A": "project_panel::NewDirectory",
      "r": "project_panel::Rename",
      "d": "project_panel::Delete",
      "x": "project_panel::Cut",
      "c": "project_panel::Copy",
      "p": "project_panel::Paste",
      "q": "workspace::ToggleLeftDock"
    }
  },
  // GIT PANEL
  {
    "context": "GitPanel",
    "bindings": {
      "q": "git_panel::Close"
    }
  },
  // Sneak motion, refer https://github.com/zed-industries/zed/pull/22793/files#diff-90c0cb07588e2f309c31f0bb17096728b8f4e0bad71f3152d4d81ca867321c68
  {
    "context": "vim_mode == normal || vim_mode == visual",
    "bindings": {
      "s": [
        "vim::PushSneak",
        {}
      ],
      "S": [
        "vim::PushSneakBackward",
        {}
      ]
    }
  }
  // GIT PANEL ONLY - Reverted to lazygit task but keeping for future reference
  // https://github.com/zed-industries/zed/blob/5615be51cc2cfbac71d01a0f446b9e2174fe7b34/assets/keymaps/default-macos.json#L802C3-L816C5
  // {
  //   "context": "GitPanel",
  //   "use_key_equivalents": true,
  //   "bindings": {
  //     "a": "git::StageAll",
  //     //"A": "git::CommitAmend",
  //     "b": "git::Branch",
  //     "c": "git::Commit",
  //     "d": "git::Diff",
  //     "f": "git::Fetch",
  //     "p": "git::Pull",
  //     "P": "git::Push",
  //     "T": "git::TrashUntrackedFiles",
  //     "u": "git::UnstageAll",
  //     "ctrl-h": "workspace::ActivatePaneLeft",
  //     "ctrl-l": "workspace::ActivatePaneRight",
  //     "ctrl-k": "workspace::ActivatePaneUp",
  //     "ctrl-j": "workspace::ActivatePaneDown"
  //   }
  // },
  // Subword motion is not working really nice with `ciw`, disable for now
  // {
  //   "context": "VimControl && !menu",
  //   "bindings": {
  //     "w": "vim::NextSubwordStart",
  //     "b": "vim::PreviousSubwordStart",
  //     "e": "vim::NextSubwordEnd",
  //     "g e": "vim::PreviousSubwordEnd"
  //   }
  // }
]
